from flask import jsonify, Blueprint, current_app
from flask_wtf.csrf import CSRFProtect
from modules.auth import requires_auth

apiv2_routes = Blueprint('apiv2_routes', __name__)
csrf = CSRFProtect(current_app)

@apiv2_routes.route('/v2/<cve>', methods=['GET'])
@csrf.exempt
@requires_auth
def get_file(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    return jsonify(cve_data)

@apiv2_routes.route('/v2/<cve>/namespaces', methods=['GET'])
@csrf.exempt
@requires_auth
def get_namespaces(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    namespaces = cve_data.get('namespaces', {})
    return jsonify(namespaces)

@apiv2_routes.route('/v2/<cve>/base-score', methods=['GET'])
@csrf.exempt
@requires_auth
def get_base_score(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    nist_data = cve_data.get('namespaces', {}).get('nvd.nist.gov', {})
    base_score = nist_data.get('impact', {}).get('baseMetricV3', {}).get('cvssV3', {}).get('baseScore')
    if base_score is None:
        return 'baseScore score not available', 404
    return jsonify({'baseScore': base_score})

@apiv2_routes.route('/v2/<cve>/exploitability-score', methods=['GET'])
@csrf.exempt
@requires_auth
def get_exploitability_score(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    nist_data = cve_data.get('namespaces', {}).get('nvd.nist.gov', {})
    exploitability_score = nist_data.get('impact', {}).get('baseMetricV3', {}).get('exploitabilityScore')
    if exploitability_score is None:
        return 'Exploitability score not available', 404
    return jsonify({'exploitabilityScore': exploitability_score})