import ujson
from flask import jsonify, Blueprint, current_app
from flask_wtf.csrf import CSRFProtect
from flask_caching import Cache
from modules.auth import requires_auth

cache = Cache()

apiv2_routes = Blueprint('apiv2_routes', __name__)
csrf = CSRFProtect(current_app)

@cache.cached(timeout=60, key_prefix='get_file')
@apiv2_routes.route('/v2/<cve>', methods=['GET'])
@csrf.exempt
@requires_auth
def get_file(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    return ujson.dumps(cve_data)

@cache.cached(timeout=60, key_prefix='get_namespaces')
@apiv2_routes.route('/v2/<cve>/namespaces', methods=['GET'])
@csrf.exempt
@requires_auth
def get_namespaces(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    namespaces = cve_data.get('namespaces', {})
    return ujson.dumps(namespaces)

@cache.cached(timeout=60, key_prefix='get_mitre')
@apiv2_routes.route('/v2/<cve>/mitre', methods=['GET'])
@csrf.exempt
@requires_auth
def get_mitre(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    mitre_data = cve_data.get('namespaces', {}).get('cve.org')
    return ujson.dumps(mitre_data)

@cache.cached(timeout=60, key_prefix='get_nist')
@apiv2_routes.route('/v2/<cve>/nist', methods=['GET'])
@csrf.exempt
@requires_auth
def get_nist(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    nist_data = cve_data.get('namespaces', {}).get('nvd.nist.gov')
    return ujson.dumps(nist_data)

@cache.cached(timeout=60, key_prefix='get_nist_description')
@apiv2_routes.route('/v2/<cve>/nist/description', methods=['GET'])
@csrf.exempt
@requires_auth
def get_nist_description(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    nist_data = cve_data.get('namespaces', {}).get('nvd.nist.gov', {}).get('cve', {})
    nist_description = nist_data.get('description', {}).get('description_data')[0].get('value')
    if nist_description is None:
        return 'Description not available', 404
    return ujson.dumps({'description': nist_description})

@cache.cached(timeout=60, key_prefix='get_base_score')
@apiv2_routes.route('/v2/<cve>/nist/base-score', methods=['GET'])
@csrf.exempt
@requires_auth
def get_base_score(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    nist_data = cve_data.get('namespaces', {}).get('nvd.nist.gov', {})
    base_score = nist_data.get('impact', {}).get('baseMetricV3', {}).get('cvssV3', {}).get('baseScore')
    if base_score is None:
        return 'baseScore score not available', 404
    return ujson.dumps({'baseScore': base_score})

@cache.cached(timeout=60, key_prefix='get_exploitability_score')
@apiv2_routes.route('/v2/<cve>/nist/exploitability-score', methods=['GET'])
@csrf.exempt
@requires_auth
def get_exploitability_score(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    nist_data = cve_data.get('namespaces', {}).get('nvd.nist.gov', {})
    exploitability_score = nist_data.get('impact', {}).get('baseMetricV3', {}).get('exploitabilityScore')
    if exploitability_score is None:
        return 'Exploitability score not available', 404
    return ujson.dumps({'exploitabilityScore': exploitability_score})

@cache.cached(timeout=60, key_prefix='get_nist_references')
@apiv2_routes.route('/v2/<cve>/nist/references', methods=['GET'])
@csrf.exempt
@requires_auth
def get_nist_references(cve):
    gsd_database = current_app.gsd_database
    cve_data = gsd_database.get_cve(cve)
    if cve_data is None:
        return 'CVE not found', 404
    nist_data = cve_data.get('namespaces', {}).get('nvd.nist.gov', {})
    references = nist_data.get('cve', {}).get('references')
    # if references is None, return an empty json object
    if references is None:
        return ujson.dumps({})
    return ujson.dumps(references)