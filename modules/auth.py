import hashlib
import secrets
from flask import request
from pymongo import MongoClient

# MongoDB Configuration
client = MongoClient('mongodb://localhost:27017')
db = client['cveland']
tokens_collection = db['tokens']

def token_exists(username):
    # Check if the token exists for the given username in the MongoDB collection
    document = tokens_collection.find_one({'username': username})
    return document is not None

def delete_token(username):
    # Delete the token document for the given username from the MongoDB collection
    tokens_collection.delete_one({'username': username})

def generate_salt():
    # Generate a random salt to be used for each new token
    return secrets.token_hex(32)

def hash_token(username, salt, token):
    # Hash the token using the username and salt
    hashed_token = hashlib.sha256((salt + username + token).encode('utf-8')).hexdigest()
    return hashed_token

def store_token(username, salt, token):
    # Store the token in the MongoDB collection
    hashed_token = hash_token(username, salt, token)
    tokens_collection.update_one(
        {'username': username},
        {'$set': {'salt': salt, 'hashed_token': hashed_token}},
        upsert=True
    )

def verify_token(username, salt, token):
    """
    Verify the token for the given username.

    Args:
        username (str): The username.
        salt (str): The salt.
        token (str): The token as URL safe base64 string.

    Returns:
        bool: True if the token is valid, False otherwise.
    """
    document = tokens_collection.find_one({'username': username})
    if document:
        stored_salt = document['salt']
        stored_hashed_token = document['hashed_token']
        hashed_token = hash_token(username, stored_salt, token)
        return hashed_token == stored_hashed_token
    return False

def requires_auth(f):
    """
    Decorator function for requiring authentication.

    Args:
        f (function): The function to decorate.

    Returns:
        function: The decorated function.
    """
    def wrapper(*args, **kwargs):
        auth = request.headers.get('Authorization')
        if not auth:
            return 'Missing authorization header', 401
        auth_parts = auth.split(' ')
        if len(auth_parts) != 3 or auth_parts[0] != 'Bearer':
            return 'Invalid authorization header', 401
        username = auth_parts[1]
        token = auth_parts[2]
        document = tokens_collection.find_one({'username': username})
        if document:
            salt = document['salt']
            if verify_token(username, salt, token):
                return f(*args, **kwargs)
        return 'Invalid token', 401

    # Set the name of the wrapper function to the name of the decorated function
    wrapper.__name__ = f.__name__
    return wrapper
