#!/usr/bin/env python3
import json
from flask import Flask, jsonify, request
from gsd_database import GsdDatabase
import hashlib

app = Flask(__name__)
gsd_database = GsdDatabase(app)

# Load the tokens from the JSON file
with open('tokens.json', 'r') as f:
    tokens = json.load(f)
# Load the salt from the JSON file
with open('salt.json', 'r') as f:
    salt = json.load(f)['salt']

def hash_token(username, token):
    hashed_token = hashlib.sha256((salt + username + token).encode('utf-8')).hexdigest()
    return hashed_token


def requires_auth(f):
    def wrapper(*args, **kwargs):
        auth = request.headers.get('Authorization')
        if not auth:
            return 'Missing authorization header', 401
        auth_parts = auth.split(' ')
        if len(auth_parts) != 3 or auth_parts[0] != 'Bearer':
            return 'Invalid authorization header, lol', 401
        username = auth_parts[1]
        token = auth_parts[2]
        hashed_token = hash_token(username, token)
        if username not in tokens or hashed_token != tokens[username]['hashed_token']:
            return 'Invalid token, bro. Try again.', 401
        return f(*args, **kwargs)

    # Set the name of the wrapper function to the name of the decorated function
    wrapper.__name__ = f.__name__
    return wrapper

@app.route('/gsd-database/<cve>/baseScore',methods=['GET'])
@requires_auth
def get_base_score(cve):
    base_score_value = gsd_database.get_base_score(cve)
    if base_score_value is None:
        return 'File not found', 404
    return jsonify(base_score_value)

@app.route('/gsd-database/<cve>',methods=['GET'])
@requires_auth
def get_file(cve):
    data = gsd_database.get_file(cve)
    if data is None:
        return 'File not found', 404
    return jsonify(data)

if __name__ == '__main__':
    app.run(threaded=True, debug=False)
