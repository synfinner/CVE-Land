#!/usr/bin/env python3
import secrets
import os.path
from flask import Flask, render_template, redirect, flash, request, session
from flask_wtf.csrf import CSRFProtect
from modules.gsd_database import GsdDatabase2
from modules.apiv2_routes import apiv2_routes
from modules import auth
from pymongo import MongoClient
# import html for escaping HTML characters
import html
from dotenv import load_dotenv
from flasgger import Swagger

# Load environment variables from .env file
load_dotenv()

app: Flask = Flask(__name__)
swagger = Swagger(app,template_file='swagger.yml')
# Set the SECRET_KEY from the environment variable
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')
# CSRF protection used for admin panel operations
csrf = CSRFProtect(app)

client = MongoClient('mongodb://localhost:27017', serverSelectionTimeoutMS=2000)

# Register the apiv2_routes blueprint and use the new API
app.register_blueprint(apiv2_routes)
gsd_database: GsdDatabase2 = GsdDatabase2(client['cveland'])
app.gsd_database = gsd_database

def get_flashed_messages():
    flashes = session.pop('_flashes', None)
    if flashes is None:
        return []
    return flashes

@app.route('/admin', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        # Retrieve the username and password from the form and escape them
        username = html.escape(request.form['username'])
        password = html.escape(request.form['password'])
        # Retrieve the admin username and password from the environment variables
        admin_username = os.environ.get('ADMIN_USERNAME')
        admin_password = os.environ.get('ADMIN_PASSWORD')
        if username == admin_username and password == admin_password:
            session['admin'] = True
            return redirect('/admin/dashboard')
        else:
            flash('Invalid username or password')
    return render_template('admin_login.html')

@app.route('/admin/dashboard')
def admin_dashboard():
    if not session.get('admin'):
        return redirect('/admin')
    return render_template('admin_dashboard.html')

# Display all tokens
@app.route('/admin/tokens')
def admin_tokens():
    # Check if the user is logged in as admin
    if not session.get('admin'):
        return redirect('/admin')
    # Retrieve all tokens from the database and store them in a list
    user_tokens = []
    # Loop through all documents in the tokens collection
    for document in auth.tokens_collection.find():
        username = document['username']
        hashed_token = document['hashed_token']
        # Append the username and hashed token to the list
        user_tokens.append({'user': username, 'hashed_token': hashed_token})
    deleted_token = session.pop('deleted_token', None)  # Retrieve and remove the deleted token from the session
    # Return the list of tokens to the template
    return render_template('admin_tokens.html', user_tokens=user_tokens, deleted_token=deleted_token)

# Delete a token
@app.route('/admin/delete_token/<username>', methods=['POST'])
def delete_token(username):
    # Check if the user is logged in as admin
    if not session.get('admin'):
        return redirect('/admin')
    # Check if the token exists
    if auth.token_exists(username):
        # Delete the token from the database
        auth.delete_token(username)
        flash(f'Token for {username} deleted successfully')
        session['deleted_token'] = username  # Store the deleted token in the session
    return redirect('/admin/tokens')

@app.route('/admin/new_token', methods=['GET', 'POST'])
def new_token():
    if not session.get('admin'):
        return redirect('/admin')
    if request.method == 'POST':
        username = html.escape(request.form['username'])
        # Check if a token already exists for the given user
        if auth.token_exists(username):
            flash('A token already exists for this user')
        else:
            # Generate a random token 32 bytes long
            token = secrets.token_hex(32)
            # Generate a random salt
            salt = auth.generate_salt()
            # Store the token securely in the database
            auth.store_token(username, salt, token)
            # Display the plain token to the user only once
            flash(f'New token has been created for user {username}')
            flash(f'The plain token for requests is: {token} - Keep it safe! This is the only time you will see it.')
    return render_template('new_token.html')

@app.route('/admin/logout')
def admin_logout():
    # Clear the session
    session.clear()
    return redirect('/admin')

@app.route('/')
def redirect_to_admin():
    return redirect('/admin')

if __name__ == '__main__':
    app.run(threaded=True, debug=True)
