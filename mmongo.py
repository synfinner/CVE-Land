#!/usr/bin/env python3
import os
import json
import time
from pymongo import MongoClient

client = MongoClient('mongodb://localhost:27017')
db = client['cveland']
collection = db['cves']

timestamp_file_path = 'last_processed_timestamp.txt'  # Path to the file storing the last processed timestamp

def get_last_processed_timestamp():
    try:
        with open(timestamp_file_path, 'r') as timestamp_file:
            return float(timestamp_file.read().strip())
    except FileNotFoundError:
        return 0

def set_last_processed_timestamp(timestamp):
    with open(timestamp_file_path, 'w') as timestamp_file:
        timestamp_file.write(str(timestamp))

def insert_or_update_json_files(directory):
    last_processed_timestamp = get_last_processed_timestamp()
    for root, dirs, files in os.walk(directory):
        for file_name in files:
            if file_name.endswith('.json'):
                file_path = os.path.join(root, file_name)
                if os.path.getmtime(file_path) > last_processed_timestamp:
                    insert_or_update_json_file(file_path)

def insert_or_update_json_file(file_path):
    with open(file_path) as json_file:
        data = json.load(json_file)
    
    if not os.path.basename(file_path).startswith('GSD-'):
        print(f"Skipping file: {file_path}")
        return
    # Check if we can set the _id field to the GSD alias ("cve-YYYY-NNNN")
    try:
        data['_id'] = data['GSD']['alias']
    except KeyError:
        print(f"Skipping file: {file_path}")
        return
    
    existing_document = collection.find_one({'_id': data['_id']})
    if existing_document is None:
        collection.insert_one(data)
        print(f"Inserted new document: {data['_id']}")
    else:
        existing_document.update(data)
        collection.replace_one({'_id': data['_id']}, existing_document)
        print(f"Updated document: {data['_id']}")

if __name__ == '__main__':
    gsd_database_dir = 'gsd-database'  # Path to the gsd-database directory

    insert_or_update_json_files(gsd_database_dir)

    # Update the last processed timestamp
    current_timestamp = time.time()
    set_last_processed_timestamp(current_timestamp)

