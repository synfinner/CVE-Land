#!/usr/bin/env python3

import os
import json
from flask import Flask, jsonify, request
from flask_caching import Cache

app = Flask(__name__)
cache = Cache(app, config={'CACHE_TYPE': 'simple'})


@app.route('/gsd-database/<cve>/baseScore')
def get_base_score(cve):
    file_path = search_for_cve_file(cve)
    if file_path is None:
        return 'File not found', 404
    with open(file_path) as json_file:
        data = json.load(json_file)
    base_score_param = request.args.get('baseScore')
    try:
        base_score_value = float(data['namespaces']['nvd.nist.gov']['impact']['baseMetricV3']['cvssV3']['baseScore'])
        return jsonify({"baseScore": base_score_value})
    except:
        pass

@app.route('/gsd-database/<cve>')
def get_file(cve):
    if cve is None:
        return 'Missing CVE number', 400
    file_path = search_for_cve_file(cve)
    if file_path is None:
        return 'File not found', 404
    with open(file_path) as json_file:
        data = json.load(json_file)
    return jsonify(data)

@cache.cached(timeout=300, key_prefix='search_for_cve_file')
def search_for_cve_file(cve):
    cve_parts = cve.split('-')
    print(cve_parts)
    cvv, year, cve_id = cve_parts
    print(cvv, year,cve_id)
    app_dir = os.path.abspath(os.path.dirname(__file__))
    for root, dirs, files in os.walk(os.path.join(app_dir, '..', 'gsd-database')):
        for file_name in files:
            if file_name.endswith('.json'):
                file_parts = file_name.split('-')
                if len(file_parts) != 3:
                    continue
                # Remove .json from file_parts[2]
                file_parts[2] = file_parts[2].replace('.json', '')
                if file_parts[0] == 'GSD' and file_parts[1] == year and file_parts[2] == cve_id:
                    file_path = os.path.join(root, file_name)
                    return file_path
    return None


if __name__ == '__main__':
    app.run(debug=False)
